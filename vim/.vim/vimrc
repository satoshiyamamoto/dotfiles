set mouse=a
set number
set relativenumber
set colorcolumn=+1
set splitbelow
set splitright
set incsearch
set hlsearch
set confirm
set clipboard+=unnamed
set ttimeoutlen=50
set updatetime=100
set nocompatible
set grepprg=grep\ -rnH\ --exclude-dir=.git
set grepformat=%f:%l:%m

if !1 | finish | endif
let mapleader = ' '

set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

" Plugins
" Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin()

" language server & completion
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete-buffer.vim'
Plug 'prabirshrestha/asyncomplete-file.vim'
Plug 'mattn/vim-lsp-settings'
Plug 'lighttiger2505/sqls.vim'

" snippet
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'
Plug 'rafamadriz/friendly-snippets'
Plug 'mattn/vim-goimports'
Plug 'mattn/emmet-vim'
Plug 'jiangmiao/auto-pairs'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'

" formatter
Plug 'editorconfig/editorconfig-vim'
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install --frozen-lockfile --production',
  \ 'for': ['javascript', 'typescript', 'css', 'json', 'markdown', 'vue', 'yaml', 'html'] }
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
Plug 'google/vim-glaive'

" finder
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

" theme
Plug 'folke/tokyonight.nvim'
Plug 'satoshiyamamoto/vim-github-dark'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'luochen1990/rainbow'
call plug#end()

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gs <plug>(lsp-document-symbol-search)
  nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gi <plug>(lsp-implementation)
  nmap <buffer> <leader>rn <plug>(lsp-rename)
  nmap <buffer> <leader>ca <plug>(lsp-code-action)
  nmap <buffer> [d <plug>(lsp-previous-diagnostic)
  nmap <buffer> ]d <plug>(lsp-next-diagnostic)
  nmap <buffer> K <plug>(lsp-hover)
  nmap <buffer> <leader>f <plug>(lsp-document-format)
  inoremap <buffer> <expr><c-f> lsp#scroll(+4)
  inoremap <buffer> <expr><c-d> lsp#scroll(-4)

  " let g:lsp_format_sync_timeout = 1000
  " autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'allowlist': ['*'],
    \ 'priority': 15,
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
    \ 'config': {
    \    'max_buffer_size': 1000000,
    \  },
    \ }))

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ 'name': 'file',
    \ 'allowlist': ['*'],
    \ 'priority': 10,
    \ 'completor': function('asyncomplete#sources#file#completor')
    \ }))

augroup filetype_settings
  autocmd FileType tf set filetype=terraform
augroup END

augroup terminal_settings
  autocmd TerminalOpen * setlocal nonumber norelativenumber
augroup END

augroup autoformat_settings
  autocmd FileType bzl AutoFormatBuffer buildifier
  autocmd FileType c,cpp,proto,arduino AutoFormatBuffer clang-format
  autocmd FileType dart AutoFormatBuffer dartfmt
  autocmd FileType go AutoFormatBuffer gofmt
  autocmd FileType gn AutoFormatBuffer gn
  autocmd FileType javascript,html,css,sass,scss,less,json AutoFormatBuffer prettier
  autocmd FileType java AutoFormatBuffer google-java-format
  autocmd FileType python AutoFormatBuffer yapf
  autocmd FileType rust AutoFormatBuffer rustfmt
augroup END

" Mappings
imap <silent>jj         <Esc>
nmap <C-j>              <C-w>j
nmap <C-k>              <C-w>k
nmap <C-h>              <C-w>h
nmap <C-l>              <C-w>l
nmap <silent>[c         :GitGutterPrevHunk<CR>
nmap <silent>]c         :GitGutterNextHunk<CR>
nmap <silent>[b         :bprevious<CR>
nmap <silent>]b         :bnext<CR>
nmap <silent>[B         :bfirst<CR>
nmap <silent>]B         :blast<CR>
nmap <silent>[q         :cprevious<CR>
nmap <silent>]q         :cnext<CR>
nmap <silent><C-\>      :bo terminal ++close ++rows=12<CR>
tmap <C-\>              <C-c><C-d>
tmap <Esc>              <C-\><C-n>
tmap <C-[>              <C-\><C-n>
nmap <silent>s          <Plug>(easymotion-s2)
nmap <silent>S          <Plug>(easymotion-bd-w)
nmap <silent><C-p>      :Files<CR>
nmap <silent><leader>ff :Files<CR>
nmap <silent><leader>fg :Rg<CR>
nmap <silent><leader>fb :Buffers<CR>
nmap <silent><leader>e  :NERDTreeToggle<CR>
nmap <silent><leader>r  :NERDTreeRefreshRoot<CR>
nmap <silent><leader>n  :NERDTreeFind<CR>
imap <expr> <C-j>       vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
smap <expr> <C-j>       vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
imap <expr> <C-l>       vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>       vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
imap <expr> <Tab>       vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>       vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab>     vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab>     vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
imap <expr> <Tab>       pumvisible() ? "\<C-n>" : "\<Tab>"
imap <expr> <S-Tab>     pumvisible() ? "\<C-p>" : "\<S-Tab>"
imap <expr> <CR>        pumvisible() ? "\<C-y>" : "\<CR>"

" Themes
set rtp+=~/.vim/plugged/tokyonight.nvim/extras/vim
colorscheme tokyonight
let g:airline_theme='lucius'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:rainbow_active = 1
let g:rainbow_conf = { 'separately': { 'nerdtree': 0 } }
let g:NERDTreeCascadeOpenSingleChildDir = 1
highlight Normal ctermbg=NONE guibg=NONE
highlight ColorColumn ctermbg=0 guibg=#1e2030
